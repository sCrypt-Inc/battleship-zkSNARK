{"version":3,"sources":["web3/whatsonchain.ts","web3/sensiletwallet.ts","web3/wallet.ts","web3/web3.ts","WelcomeScreen.js","storage.js","Game/balance.js","Game/ReplicaBox.js","Game/PlayerFleet.js","Game/layoutHelpers.js","Game/PlayerBoard.js","Game/ComputerBoard.js","Game/PlayerTips.js","Game/GameView.js","zkp.worker.js","Game/Game.js","Header.js","Footer.js","index.js","web3/gorillapool.ts"],"names":["Whatsonchain","network","API_PREFIX","NetWork","Testnet","TX_URL_PREFIX","rawTx","size","Math","max","length","time","axios","method","url","data","Buffer","from","headers","timeout","maxBodyLength","Infinity","txid","message","isAxiosError","ae","JSON","stringify","response","Error","address","get","SensiletWallet","sensilet","window","console","log","DEBUG_TAG","warn","name","permissions","this","requestAccount","alert","open","isConnect","isConnected","error","getBsvBalance","res","balance","Promise","resolve","total","rawtx","script","satoshis","inputIndex","sigHashType","tx","bsv","Transaction","signTx","list","txHex","getAddressFromP2PKH","scriptHex","sigtype","unlockScript","Script","add","sigList","sig","publicKey","inputs","setScript","toString","signature","publickey","Gorillapool","sendRawTransaction","minAmount","options","getAddress","listUnspent","then","filter","utxo","value","map","txId","tx_hash","outputIndex","tx_pos","buildPublicKeyHashOut","toHex","getPublicKey","a","Address","fromString","Mainnet","wallet","pubKeyHash","fromHex","toASM","split","SignType","setNetwork","web3","getRawChangeAddress","contract","amountInContract","changeAddress","purpose","utxos","addOutput","Output","lockingScript","change","signRawTransaction","ALL","sendRawTx","contractUtxo","cbBuildTx","addInput","Input","prevTxId","output","WelcomeScreen","startPlay","desc","setDesc","useState","loading","setLoading","useEffect","loadContractDesc","fetchContract","catch","e","className","onClick","Player","PlayerPrivkey","player","localStorage","getItem","key","setItem","PlayerPublicKey","privateKey","PrivateKey","fromWIF","PublicKey","fromPrivateKey","ContractUtxos","index","id","outputs","push","set","utxosStr","parse","getComputerUtxoByIndex","find","getPlayerUtxoByIndex","clear","getlast","getdeploy","Balance","_balance","setBalance","setAddress","getbalance","getNetwork","ReplicaBox","shipName","selectShip","availableShips","isCurrentlyPlacing","ship","item","allReplicaSquares","Array","fill","PlayerFleet","currentlyPlacing","startTurn","startAgain","shipReplicaBoxes","fleet","playButton","SQUARE_STATE","stateToClass","generateEmptyLayout","BOARD_ROWS","coordsToIndex","coordinates","x","y","indexToCoords","floor","entityIndices","entity","position","indices","i","orientation","entityIndices2","putEntityInLayout","oldLayout","type","newLayout","slice","forEach","idx","canBePlaced","layout","isWithinBounds","every","isPlaceFree","generateRandomIndex","BOARD_COLUMNS","random","randomizeShipProps","randomStartIndex","updateSunkShips","currentHits","opponentShips","playerHitIndices","hit","includes","sunk","PlayerBoard","setCurrentlyPlacing","rotateShip","placeShip","placedShips","hitsByComputer","hitsProofToComputer","playSound","reduce","prevLayout","currentShip","currentHit","isPlacingOverBoard","canPlaceCurrentShip","forbiddenShip","squares","square","hitProofStatus","onMouseDown","status","getTxUri","focus","onMouseOver","ComputerBoard","computerShips","gameState","hitsByPlayer","setHitsByPlayer","handleComputerTurn","checkIfGameOver","setComputerShips","handleFire","hitsProofToPlayer","compLayout","fireTorpedo","newHits","successfulYourHits","successfulComputerHits","yourTurn","playerCanFire","alreadyHit","compSquares","shipsWithSunkFlag","sunkShipsAfter","sunkShipsBefore","PlayerTips","hitsbyPlayer","winner","deployTxid","numberOfHits","numberOfSuccessfulHits","accuracyScore","round","succesfulComputerHits","gameOverPanel","tipsPanel","href","target","rel","substr","GameView","computerShipsHash","changeTurn","hitComputer","Worker_fn","Worker","__webpack_public_path__","AVAILABLE_SHIPS","placed","Game","setGameState","setWinner","setPlacedShips","placedShipsHash","setPlacedShipsHash","setAvailableShips","setComputerShipsHash","setHitsByComputer","Map","setHitsProofToComputer","setHitsProofToPlayer","battleShipContract","setBattleShipContract","setDeployTxid","setQueue","zkpWorkerForPlayer","setZKPWorkerForPlayer","hp2CRef","useRef","current","hp2PRef","hbpRef","hbcRef","queue","Queue","concurrent","interval","stop","zkpWorkerMsgHandler","event","ctx","isVerified","proof","isPlayerFired","role","Proof","getTypeClassByType","G1Point","G2Point","FQ2","move","targetIdx","isHit","Int","b","c","newStates","zkWorkers","ZKPWorker","addEventListener","terminate","call","amount","getEstimateFee","setOutput","newLockingScript","getNewStateScript","setInputScript","preimage","getPreimage","currentTurn","toScript","seal","setTimeout","computerShips_","generateComputerShips","BattleShip","buildContractClass","shipHash","playerHash","computerHash","PubKey","deploy","oldGameState","placedComputerShips","decoratedShip","placeAllComputerShips","successfulPlayerHits","privateInputs","toPrivateInputs","publicInputs","postMessage","sortShipsForZK","ships","SORTED_ZK_SHIP_NAMES","sort","indexOf","multiplier","shipPreimage","val","r","BigInt","buildMimc7","mimc7","F","hash","concat","sunkSoundRef","clickSoundRef","lossSoundRef","winSoundRef","stopSound","sound","pause","currentTime","play","Fragment","ref","src","preload","shipIdx","findIndex","shipToPlace","button","previousShips","potentialTargets","hitIndex","flatMap","coords","firstRow","lastRow","firstColumn","lastColumn","neighbors","Set","number","getNeighbors","computerHits","fireResult","sunkShips","computerFire","Header","aria-label","Footer","App","appState","setAppState","setWallet","n","aliceKey","fromRandom","toWIF","bobKey","initPlayer","ReactDOM","render","document","getElementById","txhex","payload","returnResult","resultDescription"],"mappings":"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","file":"static/js/main.8f8b214f.chunk.js","sourcesContent":["import axios, { AxiosError } from 'axios';\nimport { NetWork } from './wallet';\n\nexport class Whatsonchain {\n    static API_PREFIX = ``;\n    static TX_URL_PREFIX = ``;\n    static setNetwork(network: NetWork) {\n\n        Whatsonchain.API_PREFIX = `https://api.whatsonchain.com/v1/bsv/${network === NetWork.Testnet ? 'test' : 'main'}`;\n        Whatsonchain.TX_URL_PREFIX = `${network === NetWork.Testnet ? 'https://classic-test.whatsonchain.com/tx' : 'https://classic.whatsonchain.com/tx'}`;\n    }\n\n    \n    static async sendRawTransaction(rawTx: string) {\n\n\n        // 1 second per KB\n        const size = Math.max(1, rawTx.length / 2 / 1024); //KB\n        const time = Math.max(100000, 1000 * size);\n\n        try {\n            const {\n                data: txid\n            } = await axios({\n                method: 'post',\n                url: 'https://api.taal.com/api/v1/broadcast',\n                data: Buffer.from(rawTx, 'hex'),\n                headers: {\n                    'Authorization': '',\n                    'Content-Type': 'application/octet-stream'\n                },\n                timeout: time,\n                maxBodyLength: Infinity\n            });\n    \n            return txid;\n        } catch (e) {\n\n            let message = 'Unknown Error'\n\n            if(axios.isAxiosError(e)) {\n                const ae = e as AxiosError;\n                message = JSON.stringify(ae.response?.data || {});\n            } else if(e instanceof Error) {\n                message = e.message;\n            }\n\n            throw new Error('sendRawTransaction error: ' + message)\n        }\n    }\n\n    static async listUnspent(address: string): Promise<any> {\n        return axios.get(`${Whatsonchain.API_PREFIX}/address/${address}/unspent`, {\n            timeout: 30000\n        });\n    }\n\n    static getTxUri(txid: string): string {\n        return `${Whatsonchain.TX_URL_PREFIX}/${txid}`;\n    }\n}\n","import { UTXO, wallet, SignType, NetWork } from './wallet';\nimport { bsv } from 'scryptlib';\nimport { Gorillapool} from './gorillapool';\n\n\nexport class SensiletWallet extends wallet {\n  static DEBUG_TAG = 'Sensilet';\n  sensilet: any;\n\n  constructor(network: NetWork = NetWork.Testnet) {\n    super(network);\n    if (typeof (window as any).sensilet !== 'undefined') {\n      console.log(SensiletWallet.DEBUG_TAG, 'Sensilet is installed!');\n      this.sensilet = (window as any).sensilet \n    } else {\n      console.warn(SensiletWallet.DEBUG_TAG, \"sensilet is not installed\");\n    }\n  }\n\n  requestAccount(name: string, permissions: string[]): Promise<any> {\n\n    if(!this.sensilet) {\n      if(typeof (window as any).sensilet === 'undefined') {\n        alert(\"sensilet is not installed\");\n         window.open(\"https://sensilet.com/\", '_blank');\n      } else  {\n        console.log(SensiletWallet.DEBUG_TAG, 'Sensilet is installed!');\n        this.sensilet = (window as any).sensilet \n        return this.sensilet.requestAccount()\n      }\n    }\n\n    return this.sensilet.requestAccount()\n  }\n\n  async isConnected(): Promise<boolean> {\n    try {\n      console.log(SensiletWallet.DEBUG_TAG, 'isConnect')\n      if (typeof this.sensilet !== 'undefined') {\n        let isConnected = await this.sensilet.isConnect();\n        console.log(SensiletWallet.DEBUG_TAG, 'connect state', isConnected);\n        return isConnected;\n      } \n\n    } catch (error) {\n      console.error('isConnected error', error)\n    }\n    return false;\n  }\n\n\n  async getbalance(): Promise<number> {\n    try {\n      let res = await this.sensilet.getBsvBalance();\n      console.log(SensiletWallet.DEBUG_TAG, 'getbalance', res.balance)\n      return Promise.resolve(res.balance.total);\n    } catch (error) {\n      console.error('getbalance error', error);\n    }\n\n    return Promise.resolve(0)\n  }\n\n  async signRawTransaction(rawtx: string,\n    script: string, \n    satoshis: number, \n    inputIndex: number, \n    sigHashType: SignType\n  ): Promise<string> {\n\n    const tx = new bsv.Transaction(rawtx);\n    let res = await this.sensilet.signTx({\n      list:[\n        {\n          txHex: rawtx,\n          address: getAddressFromP2PKH(script, this.network),\n          scriptHex: script,\n          inputIndex: inputIndex,\n          satoshis: satoshis,\n          sigtype: sigHashType\n        }\n      ]\n    });\n\n    const unlockScript = new bsv.Script()\n    .add(Buffer.from(res.sigList[0].sig,'hex'))\n    .add(Buffer.from(res.sigList[0].publicKey,'hex'));\n\n    tx.inputs[inputIndex].setScript(unlockScript);\n\n    return tx.toString();\n  }\n\n\n\n  async getSignature(rawtx: string,\n    script: string, \n    satoshis: number,\n    inputIndex: number, \n    sigHashType: SignType,\n    address: string\n  ): Promise<{\n    signature: string,\n    publickey: string\n  }> {\n\n    let res = await this.sensilet.signTx({\n      list:[\n        {\n          txHex: rawtx,\n          address: address,\n          inputIndex:inputIndex,\n          satoshis:satoshis,\n          scriptHex: script,\n          sigtype: sigHashType\n        }\n      ]\n    });\n\n    return {\n      signature: res.sigList[0].sig,\n      publickey:  res.sigList[0].publickey,\n    }\n\n  }\n\n  async sendRawTransaction(rawTx: string): Promise<string> {\n    return Gorillapool.sendRawTransaction(rawTx);\n  }\n\n  async listUnspent(minAmount: number, options?: { purpose?: string; }): Promise<UTXO[]> {\n\n    let address = await this.sensilet.getAddress();\n    console.log(SensiletWallet.DEBUG_TAG, 'listUnspent', address)\n    return Gorillapool.listUnspent(address).then(res => {\n      return res.data.filter((utxo: any) => utxo.value >= minAmount).map((utxo: any) => {\n        return {\n          txId: utxo.tx_hash,\n          outputIndex: utxo.tx_pos,\n          satoshis: utxo.value,\n          script: bsv.Script.buildPublicKeyHashOut(address).toHex(),\n        } as UTXO;\n      });\n    });\n  }\n\n\n  async getRawChangeAddress(options?: { purpose?: string; }): Promise<string> {\n    return this.sensilet.getAddress();\n  }\n\n\n  async getPublicKey(options?: { purpose?: string; }): Promise<string> {\n    return this.sensilet.getPublicKey();\n  }\n\n\n  async getNetwork(options?: { purpose?: string; }): Promise<NetWork> {\n    const address = await this.sensilet.getAddress();\n    const a = new bsv.Address.fromString(address);\n    return a.network.name === 'testnet' ? NetWork.Testnet : NetWork.Mainnet;\n  }\n}\n\nfunction getAddressFromP2PKH(script: string, network: NetWork) : string {\n  const asm = bsv.Script.fromHex(script).toASM();\n  //OP_DUP OP_HASH160 ${address} OP_EQUALVERIFY OP_CHECKSIG\n  const pubKeyHash = asm.split(' ')[2]; //get address from script\n  const address = new bsv.Address.fromHex(`${network === NetWork.Testnet ?  '6f' : '00'}${pubKeyHash}`).toString();\n  return address\n}","import { Gorillapool } from \"./gorillapool\";\nimport { Whatsonchain } from \"./whatsonchain\";\n\nexport enum NetWork {\n  Testnet = 'testnet',\n  Regtest = 'regtest',\n  Mainnet = 'mainnet',\n  STN = 'STN'\n}\n\nexport interface UTXO {\n  txId: string,\n  outputIndex: number;\n  satoshis: number;\n  script: string;\n  address?: string;\n  pubkey?: string\n}\n\n\nexport interface Account {\n  name: string,\n  paymail: string,\n  address: string,\n  permissions?: string[]\n}\n\n\n\n\nexport enum SignType {\n  ALL = 0x00000001 | 0x00000040,\n  SINGLE = 0x00000003 | 0x00000040,\n  NONE = 0x00000002 | 0x00000040,\n  ANYONECANPAY_ALL = 0x00000001 | 0x00000040 | 0x00000080,\n  ANYONECANPAY_SINGLE = 0x00000003 | 0x00000040 | 0x00000080,\n  ANYONECANPAY_NONE = 0x00000002 | 0x00000040 | 0x00000080\n}\n\n\nexport abstract class wallet {\n\n  network: NetWork;\n\n  constructor(network: NetWork) {\n    this.network = network;\n    Gorillapool.setNetwork(this.network);\n    Whatsonchain.setNetwork(this.network);\n  }\n\n  // Check if the wallet is ready. If not ready, use requestAccount to setup.\n  abstract isConnected(): Promise<boolean>;\n\n  //Dapp use this api to connect to the wallet.\n  abstract requestAccount(name: string, permissions: string[]): Promise<any>;\n\n  //get wallet balance\n  abstract getbalance(): Promise<number>;\n\n  //sign raw transaction, returns unlockscript of the p2pkh input if success\n  abstract signRawTransaction(rawtx: string, script: string, satoshis: number, inputIndex: number, sigHashType: SignType\n  ): Promise<string>;\n\n  //get signature for special input\n  abstract getSignature(rawtx: string, script: string, satoshis: number, inputIndex: number, sigHashType: SignType, address: string\n  ): Promise<{\n    signature: string,\n    publickey: string\n  }>;\n\n  //send raw transaction, returns transaction hash if success\n  abstract sendRawTransaction(rawTx: string): Promise<string>;\n\n  //returns array of unspent transaction outputs, which total amount is more than the minAmount argument.\n  abstract listUnspent(minAmount: number, options?: {\n    purpose?: string\n  }): Promise<UTXO[]>;\n\n  //returns a new Bitcoin address, for receiving change.\n  abstract getRawChangeAddress(options?: {\n    purpose?: string\n  }): Promise<string>;\n\n  //returns a public key\n  abstract getPublicKey(options?: {\n    purpose?: string\n  }): Promise<string>;\n\n  //returns current network\n  abstract getNetwork(options?: { purpose?: string; }): Promise<NetWork>;\n\n}","import { bsv, AbstractContract} from 'scryptlib';\nimport { UTXO, wallet, SignType } from './wallet';\nimport axios from 'axios';\n\nconst WEB3_VERSION = '0.0.2';\n\n\nexport class web3 {\n\n  static wallet: wallet;\n\n  static setWallet(wallet: wallet) {\n    web3.wallet = wallet;\n  }\n\n\n  static version() {\n    return WEB3_VERSION;\n  }\n\n\n  static loadContractDesc(url: string): Promise<any> {\n    return axios.get(url, {\n      timeout: 10000\n    }).then(res => {\n      return res.data;\n    });\n  }\n\n\n  static async getChangeAddress(): Promise<string> {\n    return web3.wallet.getRawChangeAddress();\n  }\n\n\n  static async sendRawTx(rawTx: string): Promise<string> {\n    return web3.wallet.sendRawTransaction(rawTx);\n  }\n\n\n  static async deploy(contract: AbstractContract, amountInContract: number): Promise<string> {\n    const wallet = web3.wallet\n\n    const changeAddress = await web3.wallet.getRawChangeAddress();\n\n    return wallet.listUnspent(amountInContract, {\n      purpose: 'listUnspent'\n    }).then((utxos: UTXO[]) => {\n      if(utxos.length === 0) {\n        throw new Error('no utxo available')\n      }\n      const tx = new bsv.Transaction();\n      tx.from([utxos[0]])\n        .addOutput(new bsv.Transaction.Output({\n          script: contract.lockingScript,\n          satoshis: amountInContract,\n        }))\n        .change(changeAddress);\n\n      return wallet.signRawTransaction(tx.toString(), utxos[0].script, utxos[0].satoshis, 0, SignType.ALL);\n    }).then(async (rawTx: string) => {\n      await web3.sendRawTx(rawTx);\n      return rawTx;\n    })\n  }\n\n  static async call(contractUtxo: UTXO,\n    cbBuildTx: (tx: bsv.Transaction) => Promise<void>,\n  ): Promise<string> {\n    const tx = new bsv.Transaction();\n    tx.addInput(new bsv.Transaction.Input({\n      prevTxId: contractUtxo.txId,\n      outputIndex: contractUtxo.outputIndex,\n      script: new bsv.Script(), // placeholder\n      output: new bsv.Transaction.Output({\n        script: contractUtxo.script,\n        satoshis: contractUtxo.satoshis,\n      })\n    }));\n\n    await cbBuildTx(tx);\n\n    const rawTx = tx.toString();\n    await web3.sendRawTx(rawTx);\n    return rawTx;\n  }\n}","import React, { useEffect, useState } from 'react';\nimport { web3 } from './web3';\nexport const WelcomeScreen = ({ startPlay, desc, setDesc }) => {\n\n  const [loading, setLoading] = useState(true); // play or welcome\n  // Similar to componentDidMount and componentDidUpdate:\n  useEffect(() => {\n    async function fetchContract() {\n      let desc = await web3.loadContractDesc(\n        \"/zk-battleship/battleship_debug_desc.json\"\n      );\n      return desc;\n    }\n\n    if(!desc) {\n      fetchContract().then(desc => {\n        setDesc(desc)\n        setLoading(false)\n      })\n      .catch(e => {\n        console.error('load desc error:', e)\n      })\n    }\n  });\n  return (\n    <main>\n      <h2 className=\"tip-box-title\">Rules</h2>\n      <p className=\"player-tip\">\n        You and your opponent are competing navy commanders. Your fleets are positioned at\n        secret coordinates, and you take turns firing torpedoes at each other. The first\n        to sink the other person’s whole fleet wins!\n      </p>\n      <button onClick={startPlay}>{loading ? \"loading...\" : \"Play\"}</button>\n    </main>\n  );\n};\n","import { toHex, bsv } from \"scryptlib\";\nimport { NetWork } from \"./web3\";\n\n\nexport const Player = {\n  Computer: 'computer',\n  You: 'you'\n};\n\n// store alice and bob's Privkey\nexport const PlayerPrivkey = {\n  get: (player) => {\n    return localStorage.getItem(player);\n  },\n  set: (player, key) => {\n    localStorage.setItem(player, key);\n  },\n};\n\n// store alice and bob's PublicKey, readonly\nexport const PlayerPublicKey = {\n  get: (player) => {\n    const key = PlayerPrivkey.get(player);\n    const privateKey = new bsv.PrivateKey.fromWIF(key);\n    const publicKey = bsv.PublicKey.fromPrivateKey(privateKey);\n    return toHex(publicKey);\n  }\n};\n\nexport const PlayerPKH = {\n  get: (player) => {\n    const key = PlayerPrivkey.get(player);\n    const privateKey = new bsv.PrivateKey.fromWIF(key);\n    const publicKey = bsv.PublicKey.fromPrivateKey(privateKey);\n    const pkh = bsv.crypto.Hash.sha256ripemd160(publicKey.toBuffer())\n    return toHex(pkh);\n  }\n};\n\n// store alice and bob's PublicKey Address, readonly\nexport const PlayerAddress = {\n  get: (player) => {\n    const key = PlayerPrivkey.get(player);\n    const privateKey = new bsv.PrivateKey.fromWIF(key);\n    return privateKey.toAddress().toString();\n  }\n};\n\n// store current player\nexport const CurrentPlayer = {\n  get: () => {\n    return localStorage[`player`] || Player.Computer;\n  },\n  set: (player) => {\n    localStorage.setItem(`player`, player);\n  },\n};\n\n// Randomly generated alice and bob privateKey\nexport const initPlayer = () => {\n\n  const alice = PlayerPrivkey.get(Player.Computer);\n\n  if(!alice) {\n    const aliceKey = new bsv.PrivateKey.fromRandom();\n    PlayerPrivkey.set(Player.Computer, aliceKey.toWIF())\n  }\n\n  const bob = PlayerPrivkey.get(Player.You);\n\n  if(!bob) {\n    const bobKey = new bsv.PrivateKey.fromRandom();\n    PlayerPrivkey.set(Player.You, bobKey.toWIF())\n  }\n}\n\n// store game data\nexport const GameData = {\n  get: () => {\n    const gameStr = localStorage[`game`];\n    return gameStr ? JSON.parse(gameStr) : {};\n  },\n  set: (game) => {\n    localStorage.setItem(`game`, JSON.stringify(game));\n  },\n  update: (game) => {\n    const now = GameData.get();\n    localStorage.setItem(`game`, JSON.stringify(Object.assign(now, game)));\n  },\n  clear: () => {\n    localStorage.setItem(`game`, JSON.stringify({}));\n  },\n};\n\n\n// store all utxos related to the contract\nexport const ContractUtxos = {\n  add: (rawTx, player, index = 0) => {\n    const tx = new bsv.Transaction(rawTx);\n    const utxos = ContractUtxos.get();\n    const utxo = {\n      utxo: {\n        txId: tx.id,\n        outputIndex: 0,\n        satoshis: tx.outputs[0].satoshis\n      },\n      index: index,\n      player: player,\n    };\n    utxos.push(utxo)\n    ContractUtxos.set(utxos)\n    console.log('save: utxo:', utxo.utxo.txId)\n    return utxo;\n  },\n  get: () => {\n    const utxosStr = localStorage[`utxos`];\n    return utxosStr ? JSON.parse(utxosStr) : [];\n  },\n\n  getComputerUtxoByIndex: (index) => {\n    const utxos = ContractUtxos.get();\n    return utxos.find(utxo => {\n      return utxo.index === index && !utxo.player;\n    })\n  },\n\n  getPlayerUtxoByIndex: (index) => {\n    const utxos = ContractUtxos.get();\n    return utxos.find(utxo => {\n      return utxo.index === index && utxo.player;\n    })\n  },\n  set: (utxos) => {\n    localStorage.setItem(`utxos`, JSON.stringify(utxos));\n  },\n  clear: () => {\n    localStorage.setItem(`utxos`, JSON.stringify([]));\n  },\n  getlast: () => {\n    const utxos = ContractUtxos.get();\n    return utxos[utxos.length - 1];\n  },\n\n  getdeploy: () => {\n    const utxos = ContractUtxos.get();\n    return utxos[0];\n  },\n};\n\n\nexport const CurrentNetwork = {\n  get: () => {\n    return localStorage[`network`] === 'main' ?  NetWork.Mainnet : NetWork.Testnet;\n  },\n  switch: () => {\n    const network = CurrentNetwork.get();\n    localStorage.setItem(`network`, network === NetWork.Mainnet ? 'test' : 'main');\n  },\n};\n","import React from 'react';\nimport { useState, useEffect } from \"react\";\nimport { NetWork, web3 } from \"../web3\";\nconst Balance = ({\n  balance\n}) => {\n  const [_balance, setBalance] = useState(0);\n  const [address, setAddress] = useState(\"\");\n  const [network, setNetwork] = useState(\"\");\n  useEffect(() => {\n    if (web3.wallet) {\n      web3.wallet.getbalance().then((balance) => {\n        setBalance(balance);\n      });\n\n      web3.wallet.getRawChangeAddress().then((address) => {\n        setAddress(address);\n      });\n\n      web3.wallet.getNetwork().then((network) => {\n        if (network === NetWork.Testnet) {\n          setNetwork('Testnet')\n        } else {\n          setNetwork('Mainnet')\n        }\n      });\n    }\n  }, []);\n\n  return (\n    <div className=\"wallet\">\n      <div className=\"walletInfo\">\n        <div className=\"balance\">\n          <label>Balance: {balance > 0 ? balance : _balance} <span> (satoshis)</span></label>\n          <br></br>\n          <label>NetWork: {network} </label>\n          <br></br>\n          <label>Address: {address} </label>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default Balance;","import React from 'react';\n\nexport const ReplicaBox = ({\n  shipName,\n  selectShip,\n  availableShips,\n  isCurrentlyPlacing,\n}) => {\n  let ship = availableShips.find((item) => item.name === shipName);\n  let shipLength = new Array(ship.length).fill('ship');\n  let allReplicaSquares = shipLength.map((item, index) => (\n    <div className=\"small-square\" key={index} />\n  ));\n\n  return (\n    <div\n      id={`${shipName}-replica`}\n      onClick={() => selectShip(shipName)}\n      key={`${shipName}`}\n      className={isCurrentlyPlacing ? 'replica placing' : 'replica'}\n    >\n      <div className=\"replica-title\">{shipName}</div>\n      <div className=\"replica-squares\">{allReplicaSquares}</div>\n    </div>\n  );\n};\n","import React from 'react';\nimport { ReplicaBox } from './ReplicaBox';\n\nexport const PlayerFleet = ({\n  availableShips,\n  selectShip,\n  currentlyPlacing,\n  startTurn,\n  startAgain,\n}) => {\n  let shipsLeft = availableShips.map((ship) => ship.name);\n\n  // For every ship still available, return a Replica Box with the ship's name and as many squares as its length\n  let shipReplicaBoxes = shipsLeft.map((shipName) => (\n    <ReplicaBox\n      selectShip={selectShip}\n      key={shipName}\n      isCurrentlyPlacing={currentlyPlacing && currentlyPlacing.name === shipName}\n      shipName={shipName}\n      availableShips={availableShips}\n    />\n  ));\n\n  let fleet = (\n    <div id=\"replica-fleet\">\n      {shipReplicaBoxes}\n      <p className=\"player-tip\">Right click to rotate before you position.</p>\n      <p className=\"restart\" onClick={startAgain}>\n        Restart\n      </p>\n    </div>\n  );\n\n  let playButton = (\n    <div id=\"play-ready\">\n      <p className=\"player-tip\">Ships are in formation.</p>\n      <button id=\"play-button\" onClick={startTurn}>\n        Start game\n      </button>\n    </div>\n  );\n\n  return (\n    <div id=\"available-ships\">\n      <div className=\"tip-box-title\"> Your Ships</div>\n      {availableShips.length > 0 ? fleet : playButton}\n    </div>\n  );\n};\n","export const BOARD_ROWS = 10;\nexport const BOARD_COLUMNS = 10;\nexport const BOARD = BOARD_COLUMNS * BOARD_ROWS;\n\nexport const SQUARE_STATE = {\n  empty: 'empty',\n  ship: 'ship',\n  hit: 'hit',\n  miss: 'miss',\n  ship_sunk: 'ship-sunk',\n  forbidden: 'forbidden',\n  awaiting: 'awaiting',\n};\n\nexport const stateToClass = {\n  [SQUARE_STATE.empty]: 'empty',\n  [SQUARE_STATE.ship]: 'ship',\n  [SQUARE_STATE.hit]: 'hit',\n  [SQUARE_STATE.miss]: 'miss',\n  [SQUARE_STATE.ship_sunk]: 'ship-sunk',\n  [SQUARE_STATE.forbidden]: 'forbidden',\n  [SQUARE_STATE.awaiting]: 'awaiting',\n};\n\n// Returns an empty board\nexport const generateEmptyLayout = () => {\n  return new Array(BOARD_ROWS * BOARD_COLUMNS).fill(SQUARE_STATE.empty);\n};\n\n// Returns the index of a clicked square from coordinates and viceversa\nexport const coordsToIndex = (coordinates) => {\n  const { x, y } = coordinates;\n\n  return y * BOARD_ROWS + x;\n};\n\nexport const indexToCoords = (index) => {\n  return {\n    x: index % BOARD_ROWS,\n    y: Math.floor(index / BOARD_ROWS),\n  };\n};\n// Returns the indices that entity would take up\nexport const entityIndices = (entity) => {\n  let position = coordsToIndex(entity.position);\n\n  let indices = [];\n\n  for (let i = 0; i < entity.length; i++) {\n    indices.push(position);\n    position = entity.orientation === 'vertical' ? position + BOARD_ROWS : position + 1;\n  }\n\n  return indices;\n};\n\n// Alternative take\nexport const entityIndices2 = (entity) => {\n  let indices = [];\n  for (let i = 0; i < entity.length; i++) {\n    const position =\n      entity.orientation === 'vertical'\n        ? coordsToIndex({ y: entity.position.y + i, x: entity.position.x })\n        : coordsToIndex({ y: entity.position.y, x: entity.position.x + i });\n    indices.push(position);\n  }\n\n  return indices;\n};\n\n// If it fits, I sits. Checks the ship doesn't overflow\nexport const isWithinBounds = (entity) => {\n  return (\n    (entity.orientation === 'vertical' &&\n      entity.position.y + entity.length <= BOARD_ROWS) ||\n    (entity.orientation === 'horizontal' &&\n      entity.position.x + entity.length <= BOARD_COLUMNS)\n  );\n};\n\n// Place an entity on a layout\nexport const putEntityInLayout = (oldLayout, entity, type) => {\n  let newLayout = oldLayout.slice();\n\n  if (type === 'ship') {\n    entityIndices(entity).forEach((idx) => {\n      newLayout[idx] = SQUARE_STATE.ship;\n    });\n  }\n\n  if (type === 'forbidden') {\n    entityIndices(entity).forEach((idx) => {\n      newLayout[idx] = SQUARE_STATE.forbidden;\n    });\n  }\n\n  if (type === 'hit') {\n    newLayout[coordsToIndex(entity.position)] = SQUARE_STATE.hit;\n  }\n\n  if (type === 'miss') {\n    newLayout[coordsToIndex(entity.position)] = SQUARE_STATE.miss;\n  }\n\n  if (type === 'ship-sunk') {\n    entityIndices(entity).forEach((idx) => {\n      newLayout[idx] = SQUARE_STATE.ship_sunk;\n    });\n  }\n\n  return newLayout;\n};\n\n// Check that the indices of the ship currently being placed all correspond to empty squares\nexport const isPlaceFree = (entity, layout) => {\n  let shipIndices = entityIndices2(entity);\n\n  return shipIndices.every((idx) => layout[idx] === SQUARE_STATE.empty);\n};\n\n// Used during placement to calculate how many squares a ship is out of bounds, so that the remaining squares on the board turn red\nexport const calculateOverhang = (entity) =>\n  Math.max(\n    entity.orientation === 'vertical'\n      ? entity.position.y + entity.length - BOARD_ROWS\n      : entity.position.x + entity.length - BOARD_COLUMNS,\n    0\n  );\n\n// Checks if the ship you're trying to place is within bounds and the space is free. Both need to return true\nexport const canBePlaced = (entity, layout) =>\n  isWithinBounds(entity) && isPlaceFree(entity, layout);\n\n// Generates layout and assigns each comp ship a random orientation and set of coordinates; returns all placed ships\nexport const placeAllComputerShips = (computerShips) => {\n  let compLayout = generateEmptyLayout();\n\n  return computerShips.map((ship) => {\n    while (true) {\n      let decoratedShip = randomizeShipProps(ship);\n\n      if (canBePlaced(decoratedShip, compLayout)) {\n        compLayout = putEntityInLayout(compLayout, decoratedShip, SQUARE_STATE.ship);\n        return { ...decoratedShip, placed: true };\n      }\n    }\n  });\n};\n\n// Generate a random orientation and starting index on board for computer ships\nexport const generateRandomOrientation = () => {\n  let randomNumber = Math.floor(Math.random() * Math.floor(2));\n\n  return randomNumber === 1 ? 'vertical' : 'horizontal';\n};\n\nexport const generateRandomIndex = (value = BOARD) => {\n  return Math.floor(Math.random() * Math.floor(value));\n};\n\n// Assign a ship a random orientation and set of coordinates\nexport const randomizeShipProps = (ship) => {\n  let randomStartIndex = generateRandomIndex();\n\n  return {\n    ...ship,\n    position: indexToCoords(randomStartIndex),\n    orientation: generateRandomOrientation(),\n  };\n};\n\n// Place the computer ship in the layout\nexport const placeCompShipInLayout = (ship, compLayout) => {\n  let newCompLayout = compLayout.slice();\n\n  entityIndices2(ship).forEach((idx) => {\n    newCompLayout[idx] = SQUARE_STATE.ship;\n  });\n  return newCompLayout;\n};\n\n// Gets the neighboring squares to a successful computer hit\nexport const getNeighbors = (coords) => {\n  let firstRow = coords.y === 0;\n  let lastRow = coords.y === 9;\n  let firstColumn = coords.x === 0;\n  let lastColumn = coords.x === 9;\n\n  let neighbors = [];\n\n  // coords.y === 0;\n  if (firstRow) {\n    neighbors.push(\n      { x: coords.x + 1, y: coords.y },\n      { x: coords.x - 1, y: coords.y },\n      { x: coords.x, y: coords.y + 1 }\n    );\n  }\n\n  // coords.y === 9;\n  if (lastRow) {\n    neighbors.push(\n      { x: coords.x + 1, y: coords.y },\n      { x: coords.x - 1, y: coords.y },\n      { x: coords.x, y: coords.y - 1 }\n    );\n  }\n  // coords.x === 0\n  if (firstColumn) {\n    neighbors.push(\n      { x: coords.x + 1, y: coords.y }, // right\n      { x: coords.x, y: coords.y + 1 }, // down\n      { x: coords.x, y: coords.y - 1 } // up\n    );\n  }\n\n  // coords.x === 9\n  if (lastColumn) {\n    neighbors.push(\n      { x: coords.x - 1, y: coords.y }, // left\n      { x: coords.x, y: coords.y + 1 }, // down\n      { x: coords.x, y: coords.y - 1 } // up\n    );\n  }\n\n  if (!lastColumn || !firstColumn || !lastRow || !firstRow) {\n    neighbors.push(\n      { x: coords.x - 1, y: coords.y }, // left\n      { x: coords.x + 1, y: coords.y }, // right\n      { x: coords.x, y: coords.y - 1 }, // up\n      { x: coords.x, y: coords.y + 1 } // down\n    );\n  }\n\n  let filteredResult = [\n    ...new Set(\n      neighbors\n        .map((coords) => coordsToIndex(coords))\n        .filter((number) => number >= 0 && number < BOARD)\n    ),\n  ];\n\n  return filteredResult;\n};\n\n// Give ships a sunk flag to update their color\nexport const updateSunkShips = (currentHits, opponentShips) => {\n  let playerHitIndices = currentHits.map((hit) => coordsToIndex(hit.position));\n\n  let indexWasHit = (index) => playerHitIndices.includes(index);\n\n  let shipsWithSunkFlag = opponentShips.map((ship) => {\n    let shipIndices = entityIndices2(ship);\n    if (shipIndices.every((idx) => indexWasHit(idx))) {\n      return { ...ship, sunk: true };\n    } else {\n      return { ...ship, sunk: false };\n    }\n  });\n\n  return shipsWithSunkFlag;\n};\n","import React from 'react';\nimport { ContractUtxos } from '../storage';\nimport { Whatsonchain } from '../web3';\nimport {\n  SQUARE_STATE,\n  stateToClass,\n  generateEmptyLayout,\n  putEntityInLayout,\n  indexToCoords,\n  calculateOverhang,\n  canBePlaced,\n} from './layoutHelpers';\n\nexport const PlayerBoard = ({\n  currentlyPlacing,\n  setCurrentlyPlacing,\n  rotateShip,\n  placeShip,\n  placedShips,\n  hitsByComputer,\n  hitsProofToComputer,\n  playSound,\n}) => {\n  // Player ships on empty layout\n  let layout = placedShips.reduce(\n    (prevLayout, currentShip) =>\n      putEntityInLayout(prevLayout, currentShip, SQUARE_STATE.ship),\n    generateEmptyLayout()\n  );\n\n  // Hits by computer\n  layout = hitsByComputer.reduce(\n    (prevLayout, currentHit) =>\n      putEntityInLayout(prevLayout, currentHit, currentHit.type),\n    layout\n  );\n\n  layout = placedShips.reduce(\n    (prevLayout, currentShip) =>\n      currentShip.sunk\n        ? putEntityInLayout(prevLayout, currentShip, SQUARE_STATE.ship_sunk)\n        : prevLayout,\n    layout\n  );\n\n  const isPlacingOverBoard = currentlyPlacing && currentlyPlacing.position != null;\n  const canPlaceCurrentShip = isPlacingOverBoard && canBePlaced(currentlyPlacing, layout);\n\n  if (isPlacingOverBoard) {\n    if (canPlaceCurrentShip) {\n      layout = putEntityInLayout(layout, currentlyPlacing, SQUARE_STATE.ship);\n    } else {\n      let forbiddenShip = {\n        ...currentlyPlacing,\n        length: currentlyPlacing.length - calculateOverhang(currentlyPlacing),\n      };\n      layout = putEntityInLayout(layout, forbiddenShip, SQUARE_STATE.forbidden);\n    }\n  }\n\n\n\n\n  let squares = layout.map((square, index) => {\n    const hitProofStatus = hitsProofToComputer.get(index);\n    return (\n      <div\n        onMouseDown={rotateShip}\n        onClick={() => {\n          if (canPlaceCurrentShip) {\n            playSound('click');\n            placeShip(currentlyPlacing);\n          } else if(hitProofStatus && hitProofStatus.status === 'verified') {\n            const utxo = ContractUtxos.getComputerUtxoByIndex(index);\n            if(utxo) {\n              window.open(Whatsonchain.getTxUri(utxo.utxo.txId), '_blank').focus();\n            } else {\n              console.error('utxo not found for index: ', index)\n            }\n          }\n        }}\n        className={`square ${stateToClass[square]} ${hitProofStatus ? hitProofStatus.status : ''}`}\n        key={`square-${index}`}\n        id={`square-${index}`}\n        onMouseOver={() => {\n          if (currentlyPlacing) {\n            setCurrentlyPlacing({\n              ...currentlyPlacing,\n              position: indexToCoords(index),\n            });\n          }\n        }}\n      />\n    );\n  });\n\n  return (\n    <div>\n      <h2 className=\"player-title\">You</h2>\n      <div className=\"board\">{squares}</div>\n    </div>\n  );\n};\n","import React from 'react';\nimport { ContractUtxos } from '../storage';\nimport { Whatsonchain } from '../web3';\nimport {\n  stateToClass,\n  generateEmptyLayout,\n  putEntityInLayout,\n  SQUARE_STATE,\n  indexToCoords,\n  updateSunkShips,\n} from './layoutHelpers';\n\nexport const ComputerBoard = ({\n  computerShips,\n  gameState,\n  hitsByPlayer,\n  hitsByComputer,\n  setHitsByPlayer,\n  handleComputerTurn,\n  checkIfGameOver,\n  setComputerShips,\n  playSound,\n  handleFire,\n  hitsProofToPlayer,\n}) => {\n  // Ships on an empty layout\n  let compLayout = computerShips.reduce(\n    (prevLayout, currentShip) =>\n      putEntityInLayout(prevLayout, currentShip, SQUARE_STATE.ship),\n    generateEmptyLayout()\n  );\n\n  //  Add hits dealt by player\n  compLayout = hitsByPlayer.reduce(\n    (prevLayout, currentHit) =>\n      putEntityInLayout(prevLayout, currentHit, currentHit.type),\n    compLayout\n  );\n\n  compLayout = computerShips.reduce(\n    (prevLayout, currentShip) =>\n      currentShip.sunk\n        ? putEntityInLayout(prevLayout, currentShip, SQUARE_STATE.ship_sunk)\n        : prevLayout,\n    compLayout\n  );\n\n  // Check what's at the square and decide what next\n  const fireTorpedo = (index) => {\n    if (compLayout[index] === 'ship') {\n      const newHits = [\n        ...hitsByPlayer,\n        {\n          position: indexToCoords(index),\n          type: SQUARE_STATE.hit,\n        },\n      ];\n      setHitsByPlayer(newHits);\n\n      let successfulYourHits = newHits.filter((hit) => hit.type === 'hit').length;\n      let successfulComputerHits = hitsByComputer.filter((hit) => hit.type === 'hit')\n        .length;\n\n      handleFire('player', index, true, {\n        successfulYourHits: successfulYourHits,\n        successfulComputerHits: successfulComputerHits,\n        yourTurn: false\n      });\n\n      return newHits;\n    }\n    if (compLayout[index] === 'empty') {\n      const newHits = [\n        ...hitsByPlayer,\n        {\n          position: indexToCoords(index),\n          type: SQUARE_STATE.miss,\n        },\n      ];\n      setHitsByPlayer(newHits);\n\n      let successfulYourHits = newHits.filter((hit) => hit.type === 'hit').length;\n      let successfulComputerHits = hitsByComputer.filter((hit) => hit.type === 'hit')\n        .length;\n\n      handleFire('player', index, false, {\n        successfulYourHits: successfulYourHits,\n        successfulComputerHits: successfulComputerHits,\n        yourTurn: false\n      });\n      return newHits;\n    }\n  };\n\n  const playerTurn = gameState === 'player-turn';\n  const playerCanFire = playerTurn && !checkIfGameOver();\n\n  let alreadyHit = (index) =>\n    compLayout[index] === 'hit' ||\n    compLayout[index] === 'miss' ||\n    compLayout[index] === 'ship-sunk';\n    \n  let compSquares = compLayout.map((square, index) => {\n    const hitProofStatus = hitsProofToPlayer.get(index);\n    return (\n      <div\n        // Only display square if it's a hit, miss, or sunk ship\n        className={\n          stateToClass[square] === 'hit' ||\n          stateToClass[square] === 'miss' ||\n          stateToClass[square] === 'ship-sunk'\n            ? `square ${stateToClass[square]} ${hitProofStatus ? hitProofStatus.status : ''}`\n            : `square`\n        }\n        key={`comp-square-${index}`}\n        id={`comp-square-${index}`}\n        onClick={async () => {\n          if (playerCanFire && !alreadyHit(index)) {\n\n            const newHits = fireTorpedo(index);\n\n            const shipsWithSunkFlag = updateSunkShips(newHits, computerShips);\n            const sunkShipsAfter = shipsWithSunkFlag.filter((ship) => ship.sunk).length;\n            const sunkShipsBefore = computerShips.filter((ship) => ship.sunk).length;\n            if (sunkShipsAfter > sunkShipsBefore) {\n              playSound('sunk');\n            }\n\n            setComputerShips(shipsWithSunkFlag);\n\n            handleComputerTurn();\n            \n          } else if(hitProofStatus && hitProofStatus.status === 'verified') { // TODO: use somthing like `hitsTxStatus` to replace `hitProofStatus`\n\n            const utxo = ContractUtxos.getPlayerUtxoByIndex(index);\n      \n            if(utxo) {\n              window.open(Whatsonchain.getTxUri(utxo.utxo.txId), '_blank').focus();\n            } else {\n              console.error('utxo not found for index: ', index)\n            }\n          }\n        }}\n      />\n    );\n  });\n\n  return (\n    <div>\n      <h2 className=\"player-title\">Computer</h2>\n      <div className=\"board\">{compSquares}</div>\n    </div>\n  );\n};\n","import React from 'react';\nimport { Whatsonchain } from '../web3';\n\nexport const PlayerTips = ({\n  gameState,\n  hitsbyPlayer,\n  hitsByComputer,\n  startAgain,\n  winner,\n  deployTxid,\n}) => {\n  let numberOfHits = hitsbyPlayer.length;\n  let numberOfSuccessfulHits = hitsbyPlayer.filter((hit) => hit.type === 'hit').length;\n  let accuracyScore = Math.round(100 * (numberOfSuccessfulHits / numberOfHits));\n  let succesfulComputerHits = hitsByComputer.filter((hit) => hit.type === 'hit').length;\n\n  let gameOverPanel = (\n    <div>\n      <div className=\"tip-box-title\">Game Over!</div>\n      <p className=\"player-tip\">\n        {winner === 'player' ? 'You win! 🎉' : 'You lose 😭. Better luck next time! '}\n      </p>\n      <p className=\"restart\" onClick={startAgain}>\n        Play again?\n      </p>\n    </div>\n  );\n\n  let tipsPanel = (\n    <div>\n      <div className=\"tip-box-title\">Stats</div>\n      <div id=\"firing-info\">\n        <ul>\n          <li>deploy txid: <a href={Whatsonchain.getTxUri(deployTxid)} target=\"_blank\" rel=\"noopener noreferrer\">{deployTxid.substr(0, 6)}</a></li>\n          <li>{numberOfSuccessfulHits} successful hits</li>\n          <li>{accuracyScore > 0 ? `${accuracyScore}%` : `0%`} accuracy </li>\n        </ul>\n        <p className=\"player-tip\">The first to sink all 5 opponent ships wins.</p>\n        <p className=\"restart\" onClick={startAgain}>\n          Restart\n        </p>\n      </div>\n    </div>\n  );\n\n  return (\n    <div id=\"player-tips\">\n      {numberOfSuccessfulHits === 17 || succesfulComputerHits === 17\n        ? gameOverPanel\n        : tipsPanel}\n    </div>\n  );\n};\n","import React from 'react';\n\nimport { PlayerFleet } from './PlayerFleet';\nimport { PlayerBoard } from './PlayerBoard';\nimport { ComputerBoard } from './ComputerBoard';\nimport { PlayerTips } from './PlayerTips';\n\nexport const GameView = ({\n  availableShips,\n  selectShip,\n  currentlyPlacing,\n  setCurrentlyPlacing,\n  rotateShip,\n  placeShip,\n  placedShips,\n  startTurn,\n  computerShips,\n  computerShipsHash,\n  gameState,\n  changeTurn,\n  hitsByPlayer,\n  setHitsByPlayer,\n  hitsByComputer,\n  hitsProofToComputer,\n  hitsProofToPlayer,\n  hitComputer, // <- setHitsByComputer ?\n  handleComputerTurn,\n  checkIfGameOver,\n  startAgain,\n  winner,\n  setComputerShips,\n  playSound,\n  deployTxid,\n  handleFire\n}) => {\n  return (\n    <section id=\"game-screen\">\n      {gameState !== 'placement' ? (\n        <PlayerTips\n          gameState={gameState}\n          hitsbyPlayer={hitsByPlayer}\n          hitsByComputer={hitsByComputer}\n          winner={winner}\n          deployTxid={deployTxid}\n          startAgain={startAgain}\n        />\n      ) : (\n        <PlayerFleet\n          availableShips={availableShips}\n          selectShip={selectShip}\n          currentlyPlacing={currentlyPlacing}\n          startTurn={startTurn}\n          startAgain={startAgain}\n        />\n      )}\n\n      <PlayerBoard\n        currentlyPlacing={currentlyPlacing}\n        setCurrentlyPlacing={setCurrentlyPlacing}\n        rotateShip={rotateShip}\n        placeShip={placeShip}\n        placedShips={placedShips}\n        hitsByComputer={hitsByComputer}\n        hitsProofToComputer={hitsProofToComputer}\n        playSound={playSound}\n      />\n      <ComputerBoard\n        computerShips={computerShips}\n        changeTurn={changeTurn}\n        gameState={gameState}\n        hitComputer={hitComputer}\n        hitsByPlayer={hitsByPlayer}\n        hitsByComputer={hitsByComputer}\n        setHitsByPlayer={setHitsByPlayer}\n        handleComputerTurn={handleComputerTurn}\n        checkIfGameOver={checkIfGameOver}\n        setComputerShips={setComputerShips}\n        hitsProofToPlayer={hitsProofToPlayer}\n        playSound={playSound}\n        handleFire={handleFire}\n      />\n    </section>\n  );\n};\n","export default function Worker_fn() {\n  return new Worker(__webpack_public_path__ + \"zkp.worker.bbba687a8e43257cc2ee.worker.js\");\n}\n","/* global BigInt */\nimport React, { useState, useRef, useEffect } from 'react';\nimport { Int, buildContractClass, bsv, getPreimage, signTx, PubKey } from 'scryptlib';\nimport { ContractUtxos, Player, PlayerPrivkey, PlayerPublicKey } from '../storage';\nimport { web3 } from '../web3';\nimport Balance from './balance';\nimport { GameView } from './GameView';\n\nimport {\n  placeAllComputerShips,\n  SQUARE_STATE,\n  indexToCoords,\n  putEntityInLayout,\n  generateEmptyLayout,\n  generateRandomIndex,\n  getNeighbors,\n  updateSunkShips,\n  coordsToIndex,\n} from './layoutHelpers';\nimport { buildMimc7 } from 'circomlibjs';\nimport ZKPWorker from '../zkp.worker';\n\nimport Queue from \"queue-promise\";\n\nconst AVAILABLE_SHIPS = [\n  {\n    name: 'carrier',\n    length: 5,\n    placed: null,\n  },\n  {\n    name: 'battleship',\n    length: 4,\n    placed: null,\n  },\n  {\n    name: 'cruiser',\n    length: 3,\n    placed: null,\n  },\n  {\n    name: 'submarine',\n    length: 3,\n    placed: null,\n  },\n  {\n    name: 'destroyer',\n    length: 2,\n    placed: null,\n  },\n];\n\nexport const Game = ({ desc }) => {\n  const [gameState, setGameState] = useState('placement');\n  const [winner, setWinner] = useState(null);\n\n  const [currentlyPlacing, setCurrentlyPlacing] = useState(null);\n  const [placedShips, setPlacedShips] = useState([]);\n  const [placedShipsHash, setPlacedShipsHash] = useState([]);\n  const [availableShips, setAvailableShips] = useState(AVAILABLE_SHIPS);\n  const [computerShips, setComputerShips] = useState([]);\n  const [computerShipsHash, setComputerShipsHash] = useState([]);\n  const [hitsByPlayer, setHitsByPlayer] = useState([]);\n  const [hitsByComputer, setHitsByComputer] = useState([]);\n  const [hitsProofToComputer, setHitsProofToComputer] = useState(new Map()); // index: number => {status: 'pending'/'verified', proof?: object}\n  const [hitsProofToPlayer, setHitsProofToPlayer] = useState(new Map()); // structure same as above\n  const [battleShipContract, setBattleShipContract] = useState(null); // contract\n  const [deployTxid, setDeployTxid] = useState('');\n  const [balance, setBalance] = useState(-1);\n  const [queue, setQueue] = useState(null);\n  const [zkpWorkerForPlayer, setZKPWorkerForPlayer] = useState(null);\n  //const [zkpWorkerForComputer, setZKPWorkerForComputer] = useState(null);\n\n  const hp2CRef = useRef(hitsProofToComputer);\n  useEffect(() => {\n    hp2CRef.current = hitsProofToComputer\n  }, [hitsProofToComputer]);\n\n  const hp2PRef = useRef(hitsProofToPlayer);\n  useEffect(() => {\n    hp2PRef.current = hitsProofToPlayer\n  }, [hitsProofToPlayer]);\n\n  const hbpRef = useRef(hitsByPlayer);\n  useEffect(() => {\n    hbpRef.current = hitsByPlayer\n  }, [hitsByPlayer]);\n\n  const hbcRef = useRef(hitsByComputer);\n  useEffect(() => {\n    hbcRef.current = hitsByComputer\n  }, [hitsByComputer]);\n\n  useEffect(() => {\n    const queue = new Queue({\n      concurrent: 1,\n      interval: 20000\n    });\n\n    setQueue(queue)\n\n    return (() => {\n      queue.stop();\n    })\n  }, []);\n\n  const zkpWorkerMsgHandler = async (event) => {\n\n    const { ctx, isVerified, proof } = event.data;\n\n    if (isVerified) {\n\n\n      const isPlayerFired = ctx.role === 'player';\n\n      const contractUtxo = ContractUtxos.getlast().utxo;\n\n      const Proof = battleShipContract.getTypeClassByType(\"Proof\");\n      const G1Point = battleShipContract.getTypeClassByType(\"G1Point\");\n      const G2Point = battleShipContract.getTypeClassByType(\"G2Point\");\n      const FQ2 = battleShipContract.getTypeClassByType(\"FQ2\");\n\n      contractUtxo.script = battleShipContract.lockingScript.toHex();\n\n      await move(isPlayerFired, ctx.targetIdx, contractUtxo, ctx.isHit, new Proof({\n        a: new G1Point({\n          x: new Int(proof.proof.a[0]),\n          y: new Int(proof.proof.a[1]),\n        }),\n        b: new G2Point({\n          x: new FQ2({\n            x: new Int(proof.proof.b[0][0]),\n            y: new Int(proof.proof.b[0][1]),\n          }),\n          y: new FQ2({\n            x: new Int(proof.proof.b[1][0]),\n            y: new Int(proof.proof.b[1][1]),\n          })\n        }),\n        c: new G1Point({\n          x: new Int(proof.proof.c[0]),\n          y: new Int(proof.proof.c[1]),\n        })\n      }), ctx.newStates)\n        .then(() => {\n\n          if (isPlayerFired) {\n            setHitsProofToPlayer(new Map(hp2PRef.current.set(ctx.targetIdx, { status: isVerified ? 'verified' : 'failed', proof })))\n          } else {\n            setHitsProofToComputer(new Map(hp2CRef.current.set(ctx.targetIdx, { status: isVerified ? 'verified' : 'failed', proof })))\n          }\n        })\n        .catch(e => {\n          console.error(\"call contract error:\", e);\n          alert(\"call contract error:\" + e.message);\n        })\n\n    }\n  }\n\n  useEffect((battleShipContract) => {\n    const zkWorkers = new ZKPWorker();\n    zkWorkers.addEventListener('message', zkpWorkerMsgHandler);\n    setZKPWorkerForPlayer(zkWorkers);\n\n    return (() => {\n      zkWorkers.terminate();\n    })\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [battleShipContract]);\n\n\n  // *** PLAYER ***\n  const selectShip = (shipName) => {\n    let shipIdx = availableShips.findIndex((ship) => ship.name === shipName);\n    const shipToPlace = availableShips[shipIdx];\n\n    setCurrentlyPlacing({\n      ...shipToPlace,\n      orientation: 'horizontal',\n      position: null,\n    });\n  };\n\n  const move = async (isPlayerFired, index, contractUtxo, hit, proof, newStates) => {\n\n    console.log('call move ...', 'index=', index, newStates)\n\n    return web3.call(contractUtxo, async (tx) => {\n\n      if (newStates.successfulYourHits === 17) {\n        const amount = contractUtxo.satoshis - tx.getEstimateFee();\n\n        if (amount < 1) {\n          alert('Not enough funds.');\n          throw new Error('Not enough funds.')\n        }\n\n        tx.setOutput(0, (tx) => {\n          return new bsv.Transaction.Output({\n            script: bsv.Script.buildPublicKeyHashOut(PlayerPrivkey.get(Player.Computer)),\n            satoshis: amount,\n          })\n        })\n\n      } else if (newStates.successfulComputerHits === 17) {\n        tx.setOutput(0, (tx) => {\n          const amount = contractUtxo.satoshis - tx.getEstimateFee();\n          if (amount < 1) {\n            alert('Not enough funds.');\n            throw new Error('Not enough funds.')\n          }\n\n          return new bsv.Transaction.Output({\n            script: bsv.Script.buildPublicKeyHashOut(PlayerPrivkey.get(Player.You)),\n            satoshis: amount,\n          })\n        })\n\n      } else {\n        tx.setOutput(0, (tx) => {\n          const amount = contractUtxo.satoshis - tx.getEstimateFee();\n\n          if (amount < 1) {\n            alert('Not enough funds.');\n            throw new Error('Not enough funds.')\n          }\n\n          const newLockingScript = battleShipContract.getNewStateScript(newStates);\n\n          return new bsv.Transaction.Output({\n            script: newLockingScript,\n            satoshis: amount,\n          })\n        })\n      }\n\n\n      tx.setInputScript(0, (tx, output) => {\n        const preimage = getPreimage(tx, output.script, output.satoshis)\n        const currentTurn = !newStates.yourTurn;\n        const privateKey = new bsv.PrivateKey.fromWIF(currentTurn ? PlayerPrivkey.get(Player.You) : PlayerPrivkey.get(Player.Computer));\n        const sig = signTx(tx, privateKey, output.script, output.satoshis)\n        const position = indexToCoords(index);\n\n        let amount = contractUtxo.satoshis - tx.getEstimateFee();\n\n        if (amount < 1) {\n          alert('Not enough funds.');\n          throw new Error('Not enough funds.')\n        }\n\n        return battleShipContract.move(sig, position.x, position.y, hit, proof, amount, preimage).toScript();\n      })\n        .seal();\n\n\n    }).then(async rawTx => {\n      ContractUtxos.add(rawTx, isPlayerFired, index);\n\n      battleShipContract.successfulYourHits = newStates.successfulYourHits;\n      battleShipContract.successfulComputerHits = newStates.successfulComputerHits;\n      battleShipContract.yourTurn = newStates.yourTurn;\n\n      setTimeout(async () => {\n        web3.wallet.getbalance().then(balance => {\n          console.log('update balance:', balance)\n          setBalance(balance)\n        })\n      }, 5000);\n\n    })\n      .catch(e => {\n        console.error('call contract fail', e)\n      })\n\n  }\n\n  const placeShip = (currentlyPlacing) => {\n    setPlacedShips([\n      ...placedShips,\n      {\n        ...currentlyPlacing,\n        placed: true,\n      },\n    ]);\n\n    setAvailableShips((previousShips) =>\n      previousShips.filter((ship) => ship.name !== currentlyPlacing.name)\n    );\n\n    setCurrentlyPlacing(null);\n  };\n\n  const rotateShip = (event) => {\n    if (currentlyPlacing != null && event.button === 2) {\n      setCurrentlyPlacing({\n        ...currentlyPlacing,\n        orientation:\n          currentlyPlacing.orientation === 'vertical' ? 'horizontal' : 'vertical',\n      });\n    }\n  };\n\n  const startTurn = async () => {\n\n    const computerShips_ = generateComputerShips();\n    const BattleShip = buildContractClass(desc);\n\n    const playerHash = await shipHash(placedShips);\n    const computerHash = await shipHash(computerShips_);\n\n    const contract = new BattleShip(new PubKey(PlayerPublicKey.get(Player.You)),\n      new PubKey(PlayerPublicKey.get(Player.Computer)),\n      new Int(playerHash), new Int(computerHash), 0, 0, true);\n\n    setBattleShipContract(contract);\n\n    try {\n\n      ContractUtxos.clear();\n\n      const rawTx = await web3.deploy(contract, 10000);\n\n      ContractUtxos.add(rawTx, 0, -1);\n\n      const txid = ContractUtxos.getdeploy().utxo.txId\n\n      setDeployTxid(txid)\n\n      setTimeout(async () => {\n        web3.wallet.getbalance().then(balance => {\n          console.log('update balance:', balance)\n          setBalance(balance)\n        })\n      }, 10000);\n    } catch (error) {\n      console.error(\"deploy contract fails\", error);\n      setBattleShipContract(null);\n      alert(\"deploy contract error:\" + error.message);\n      return;\n    }\n\n\n    setGameState('player-turn');\n\n    setPlacedShipsHash(playerHash);\n\n    setComputerShipsHash(computerHash);\n  };\n\n  const changeTurn = () => {\n    setGameState((oldGameState) =>\n      oldGameState === 'player-turn' ? 'computer-turn' : 'player-turn'\n    );\n  };\n\n  // *** COMPUTER ***\n  const generateComputerShips = () => {\n    let placedComputerShips = placeAllComputerShips(AVAILABLE_SHIPS.slice());\n\n    setComputerShips(placedComputerShips);\n    return placedComputerShips\n  };\n\n  const computerFire = (index, layout) => {\n    let computerHits;\n    let fireResult;\n    if (layout[index] === 'ship') {\n      fireResult = {\n        position: indexToCoords(index),\n        type: SQUARE_STATE.hit,\n      };\n      computerHits = [\n        ...hitsByComputer,\n        fireResult,\n      ];\n    }\n    if (layout[index] === 'empty') {\n      fireResult = {\n        position: indexToCoords(index),\n        type: SQUARE_STATE.miss,\n      }\n      computerHits = [\n        ...hitsByComputer,\n        fireResult,\n      ];\n    }\n    const sunkShips = updateSunkShips(computerHits, placedShips);\n    const sunkShipsAfter = sunkShips.filter((ship) => ship.sunk).length;\n    const sunkShipsBefore = placedShips.filter((ship) => ship.sunk).length;\n    if (sunkShipsAfter > sunkShipsBefore) {\n      playSound('sunk');\n    }\n    setPlacedShips(sunkShips);\n    setHitsByComputer(computerHits);\n\n    if (fireResult) {\n\n      let successfulYourHits = hbpRef.current.filter((hit) => hit.type === 'hit').length;\n      let successfulComputerHits = computerHits.filter((hit) => hit.type === 'hit')\n        .length;\n\n      handleFire('computer', index, fireResult.type === 'hit', {\n        successfulYourHits: successfulYourHits,\n        successfulComputerHits: successfulComputerHits,\n        yourTurn: true\n      });\n    }\n  };\n\n  // Change to computer turn, check if game over and stop if yes; if not fire into an eligible square\n  const handleComputerTurn = () => {\n    changeTurn();\n\n    if (checkIfGameOver()) {\n      return;\n    }\n\n    // Recreate layout to get eligible squares\n    let layout = placedShips.reduce(\n      (prevLayout, currentShip) =>\n        putEntityInLayout(prevLayout, currentShip, SQUARE_STATE.ship),\n      generateEmptyLayout()\n    );\n\n    layout = hitsByComputer.reduce(\n      (prevLayout, currentHit) =>\n        putEntityInLayout(prevLayout, currentHit, currentHit.type),\n      layout\n    );\n\n    layout = placedShips.reduce(\n      (prevLayout, currentShip) =>\n        currentShip.sunk\n          ? putEntityInLayout(prevLayout, currentShip, SQUARE_STATE.ship_sunk)\n          : prevLayout,\n      layout\n    );\n\n    let successfulComputerHits = hitsByComputer.filter((hit) => hit.type === 'hit');\n\n    let nonSunkComputerHits = successfulComputerHits.filter((hit) => {\n      const hitIndex = coordsToIndex(hit.position);\n      return layout[hitIndex] === 'hit';\n    });\n\n    let potentialTargets = nonSunkComputerHits\n      .flatMap((hit) => getNeighbors(hit.position))\n      .filter((idx) => layout[idx] === 'empty' || layout[idx] === 'ship');\n\n    // Until there's a successful hit\n    if (potentialTargets.length === 0) {\n      let layoutIndices = layout.map((item, idx) => idx);\n      potentialTargets = layoutIndices.filter(\n        (index) => layout[index] === 'ship' || layout[index] === 'empty'\n      );\n    }\n\n    let randomIndex = generateRandomIndex(potentialTargets.length);\n\n    let target = potentialTargets[randomIndex];\n\n    setTimeout(() => {\n      computerFire(target, layout);\n      changeTurn();\n    }, 300);\n  };\n\n  // *** END GAME ***\n\n  // Check if either player or computer ended the game\n  const checkIfGameOver = () => {\n    let successfulPlayerHits = hitsByPlayer.filter((hit) => hit.type === 'hit').length;\n    let successfulComputerHits = hitsByComputer.filter((hit) => hit.type === 'hit')\n      .length;\n\n    if (successfulComputerHits === 17 || successfulPlayerHits === 17) {\n      setGameState('game-over');\n\n      if (successfulComputerHits === 17) {\n        setWinner('computer');\n        playSound('lose');\n      }\n      if (successfulPlayerHits === 17) {\n        setWinner('player');\n        playSound('win');\n      }\n\n      return true;\n    }\n\n    return false;\n  };\n\n  const startAgain = () => {\n    setGameState('placement');\n    setWinner(null);\n    setCurrentlyPlacing(null);\n    setPlacedShips([]);\n    setAvailableShips(AVAILABLE_SHIPS);\n    setComputerShips([]);\n    setHitsByPlayer([]);\n    setHitsByComputer([]);\n    setHitsProofToComputer(new Map());\n    setHitsProofToPlayer(new Map());\n    ContractUtxos.clear();\n  };\n\n  const handleFire = (role, targetIdx, isHit, newStates) => {\n    const isPlayerFired = role === 'player';\n    const privateInputs = toPrivateInputs(isPlayerFired ? computerShips : placedShips);\n    const position = indexToCoords(targetIdx);\n    const publicInputs = [isPlayerFired ? computerShipsHash : placedShipsHash, position.x.toString(), position.y.toString(), isHit];\n\n    if (isPlayerFired) {\n      setHitsProofToPlayer(new Map(hitsProofToPlayer.set(targetIdx, { status: 'pending' })));\n    } else {\n      setHitsProofToComputer(new Map(hitsProofToComputer.set(targetIdx, { status: 'pending' })));\n    }\n\n    const zkpWorker = zkpWorkerForPlayer;\n\n    // send message to worker\n    zkpWorker.postMessage({\n      // message id\n      ctx: {\n        role,\n        targetIdx,\n        isHit,\n        newStates\n      },\n      privateInputs,\n      publicInputs\n    });\n  }\n\n  // *** Zero Knowledge Proof\n\n  const sortShipsForZK = (ships) => {\n    const SORTED_ZK_SHIP_NAMES = ['carrier', 'battleship', 'cruiser', 'submarine', 'destoryer'];\n    return ships.sort((a, b) => SORTED_ZK_SHIP_NAMES.indexOf(a) - SORTED_ZK_SHIP_NAMES.indexOf(b))\n  }\n\n  const shipHash = async (ships) => {\n    let multiplier = 1n;\n    const shipPreimage =\n      sortShipsForZK(ships)\n        .reduce(\n          (res, ship) => {\n            const val = ship.position.x + ship.position.y * 16 + (ship.orientation === \"horizontal\" ? 1 : 0) * 16 * 16\n            const r = res + BigInt(val) * multiplier;\n            multiplier *= BigInt(16 ** 3);\n            return r;\n          },\n          BigInt(0)\n        );\n\n    const mimc7 = await buildMimc7();\n    return mimc7.F.toString(mimc7.hash(shipPreimage, 0));\n  }\n\n  const toPrivateInputs = (ships) => {\n    return sortShipsForZK(ships)\n      .reduce(\n        (res, ship) => {\n          return res.concat([\n            ship.position.x.toString(),\n            ship.position.y.toString(),\n            ship.orientation === \"horizontal\" ? '1' : '0'\n          ]);\n        },\n        []\n      )\n  }\n\n  // *** End ZKP **\n\n  const sunkSoundRef = useRef(null);\n  const clickSoundRef = useRef(null);\n  const lossSoundRef = useRef(null);\n  const winSoundRef = useRef(null);\n\n  const stopSound = (sound) => {\n    sound.current.pause();\n    sound.current.currentTime = 0;\n  };\n  const playSound = (sound) => {\n    if (sound === 'sunk') {\n      stopSound(sunkSoundRef);\n      sunkSoundRef.current.play();\n    }\n\n    if (sound === 'click') {\n      stopSound(clickSoundRef);\n      clickSoundRef.current.play();\n    }\n\n    if (sound === 'lose') {\n      stopSound(lossSoundRef);\n      lossSoundRef.current.play();\n    }\n\n    if (sound === 'win') {\n      stopSound(winSoundRef);\n      winSoundRef.current.play();\n    }\n  };\n  return (\n    <React.Fragment>\n      <audio\n        ref={sunkSoundRef}\n        src=\"/zk-battleship/sounds/ship_sunk.wav\"\n        className=\"clip\"\n        preload=\"auto\"\n      />\n      <audio\n        ref={clickSoundRef}\n        src=\"/zk-battleship/sounds/click.wav\"\n        className=\"clip\"\n        preload=\"auto\"\n      />\n      <audio ref={lossSoundRef} src=\"/zk-battleship/sounds/lose.wav\" className=\"clip\" preload=\"auto\" />\n      <audio ref={winSoundRef} src=\"/zk-battleship/sounds/win.wav\" className=\"clip\" preload=\"auto\" />\n      <GameView\n        availableShips={availableShips}\n        selectShip={selectShip}\n        currentlyPlacing={currentlyPlacing}\n        setCurrentlyPlacing={setCurrentlyPlacing}\n        rotateShip={rotateShip}\n        placeShip={placeShip}\n        placedShips={placedShips}\n        startTurn={startTurn}\n        computerShips={computerShips}\n        computerShipsHash={computerShipsHash}\n        gameState={gameState}\n        changeTurn={changeTurn}\n        hitsByPlayer={hitsByPlayer}\n        setHitsByPlayer={setHitsByPlayer}\n        hitsByComputer={hitsByComputer}\n        hitsProofToComputer={hitsProofToComputer}\n        hitsProofToPlayer={hitsProofToPlayer}\n        setHitsByComputer={setHitsByComputer}\n        handleComputerTurn={handleComputerTurn}\n        checkIfGameOver={checkIfGameOver}\n        startAgain={startAgain}\n        winner={winner}\n        setComputerShips={setComputerShips}\n        playSound={playSound}\n        deployTxid={deployTxid}\n        handleFire={handleFire}\n      />\n      <Balance balance={balance}></Balance>\n    </React.Fragment>\n  );\n};\n","import React from 'react';\n\nexport const Header = () => {\n  return (\n    <header>\n      <h1> Hello Battleship</h1>\n\n      <p className=\"subtitle\"> A strategy game at sea</p>\n      <span role=\"img\" aria-label=\"anchor\">\n        ⚓️\n      </span>\n    </header>\n  );\n};\n","import React from 'react';\n\nexport const Footer = () => {\n  return (\n    <footer>\n      Made by <a href=\"https://scrypt.io\" target='_blank' rel=\"noopener noreferrer\">sCrypt Inc</a>{' '}\n      <br></br>\n      Fontend credit to <a href=\"https://github.com/diemkay/battleship\" target='_blank' rel=\"noopener noreferrer\">diemkay</a>{' '}\n    </footer>\n  );\n};\n","import React, { useState } from 'react';\nimport ReactDOM from 'react-dom';\nimport { WelcomeScreen } from './WelcomeScreen';\nimport { Game } from './Game/Game.js';\nimport { Header } from './Header';\nimport { Footer } from './Footer';\n\nimport './css/style.css';\nimport { SensiletWallet, web3} from './web3';\nimport { initPlayer } from './storage';\n\nexport const App = () => {\n  const [appState, setAppState] = useState('welcome'); // play or welcome\n\n  const [desc, setDesc] = useState(null); // play or welcome\n\n  const startPlay = async () => {\n\n    const wallet =  new SensiletWallet();\n    web3.setWallet(wallet);\n    const isConnected = await web3.wallet.isConnected();\n\n    if(isConnected) {\n      const n = await wallet.getNetwork();\n      web3.setWallet(new SensiletWallet(n));\n\n      setAppState('play');\n    } else {\n\n      try {\n        const res = await web3.wallet.requestAccount(\"battleship\");\n        if (res) {\n          setAppState('play');\n        }\n      } catch (error) {\n        console.error(\"requestAccount error\", error);\n      }\n\n    }\n  };\n\n  // Renders either Welcome Screen or Game\n  return (\n    <React.Fragment>\n      <Header />\n      {appState === 'play' ? <Game desc={desc}/> : <WelcomeScreen startPlay={startPlay} desc={desc} setDesc={setDesc} />}\n      <Footer />\n    </React.Fragment>\n  );\n};\n\ninitPlayer();\nReactDOM.render(<App />, document.getElementById('root'));\n","\nimport axios, { AxiosError } from 'axios';\nimport { NetWork } from './wallet';\n\n\n\n\nexport class Gorillapool {\n    static API_PREFIX = ``;\n    static TX_URL_PREFIX = ``;\n    static setNetwork(network: NetWork) {\n\n        Gorillapool.API_PREFIX = `https://api.whatsonchain.com/v1/bsv/${network === NetWork.Testnet ? 'test' : 'main'}`;\n        Gorillapool.TX_URL_PREFIX = `${network === NetWork.Testnet ? 'https://classic-test.whatsonchain.com/tx' : 'https://classic.whatsonchain.com/tx'}`;\n    }\n\n    \n    static async sendRawTransaction(txhex: string) {\n\n\n        // 1 second per KB\n        const size = Math.max(1, txhex.length / 2 / 1024); //KB\n        const time = Math.max(100000, 1000 * size);\n\n        try {\n            const {\n                data\n            } = await axios({\n                method: 'post',\n                url: `https://testnet.merchantapi.gorillapool.io/mapi/tx`,\n                data: Buffer.from(txhex, 'hex'),\n                headers: {\n                    'Accept': 'text/plain',\n                    'Content-Type': 'application/octet-stream'\n                },\n                timeout: time,\n                maxBodyLength: Infinity\n            });\n        \n            const payload = JSON.parse(data.payload)\n            if(payload.returnResult === 'success') {\n                return payload.txid;\n            } else if(payload.returnResult === 'failure') {\n                console.error('sendTx error:', txhex)\n                throw new Error(payload.resultDescription)\n            }\n        \n            throw new Error('sendTx error')\n        } catch (e) {\n\n            let message = 'Unknown Error'\n\n            if(axios.isAxiosError(e)) {\n                const ae = e as AxiosError;\n                message = JSON.stringify(ae.response?.data || {});\n            } else if(e instanceof Error) {\n                message = e.message;\n            }\n\n            throw new Error('sendRawTransaction error: ' + message)\n        }\n    }\n\n    static async listUnspent(address: string): Promise<any> {\n        return axios.get(`${Gorillapool.API_PREFIX}/address/${address}/unspent`, {\n            timeout: 30000\n        });\n    }\n\n    static getTxUri(txid: string): string {\n        return `${Gorillapool.TX_URL_PREFIX}/${txid}`;\n    }\n}\n"],"sourceRoot":""}