import "verifier.scrypt";

contract BattleShip {

    PubKey you;
    PubKey computer;

    int yourHash;
    int computerHash;

    @state
    int successfulYourHits;

    @state
    int successfulComputerHits;

    @state
    bool yourTurn;


    @state
    bool[100] yourHits;

    @state
    bool[100] computerHits;

    public function move(Sig sig, int x, int y, bool hit, Proof proof, SigHashPreimage txPreimage)
    {
        require(Tx.checkPreimage(txPreimage));

        require(ZKSNARK.verify([hit ? 1 : 0, this.yourTurn ? this.computerHash : this.yourHash, x, y], proof));


        PubKey pubKey = this.yourTurn ? this.you : this.computer;
        require(checkSig(sig, pubKey));

        const int index = x * 10 + y;
        if (this.yourTurn) {
            require(!this.yourHits[index]);
            this.yourHits[index] = true;
            if (hit) {
                this.successfulYourHits++;
            }
        }
        else {
            require(!this.computerHits[index]);
            this.computerHits[index] = true;
            if (hit) {
                this.successfulComputerHits++;
            }
        }

        this.yourTurn = !this.yourTurn;

        bytes outputs = b'';

        if (this.successfulYourHits == 17) {
            bytes script = Utils.buildPublicKeyHashScript(hash160(this.you));
            outputs = Utils.buildOutput(script, SigHash.value(txPreimage));
        }
        else if (this.successfulComputerHits == 17) {
            bytes script = Utils.buildPublicKeyHashScript(hash160(this.computer));
            outputs = Utils.buildOutput(script, SigHash.value(txPreimage));
        }
        else {

            bytes outputScript = this.getStateScript();
            outputs = Utils.buildOutput(outputScript, SigHash.value(txPreimage));
        }

        // make sure the transaction contains the expected outputs
        require(hash256(outputs) == SigHash.hashOutputs(txPreimage));
    }
}
